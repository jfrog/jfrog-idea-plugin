import java.net.http.HttpClient
import java.net.http.HttpRequest
import java.net.http.HttpResponse
import java.nio.file.Paths

plugins {
    id "org.jetbrains.intellij" version "1.15.0"
    id "java"
    id "maven-publish"
    id "de.undercouch.download" version "5.3.0"
    id "io.freefair.lombok" version "8.0.1"
}

group 'com.jfrog.ide'
version currentVersion

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17
def testPython = project.gradle.startParameter.taskNames.contains("pythonTests")
def intellijType = testPython ? "IC" : "IU"

intellij {
    version = sandboxVersion
    type = intellijType
    plugins = ['gradle', 'maven', 'Groovy', 'properties', 'java', 'Kotlin', 'org.jetbrains.plugins.go:223.8617.56', "PythonCore:223.8617.56"]
    pluginName = 'JFrog'
    updateSinceUntilBuild = false
}

runPluginVerifier {
    ideVersions = [intellijType + "-" + sandboxVersion]
}

runIde {
    jvmArgs '-Xmx2G'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://releases.jfrog.io/artifactory/oss-releases"
    }
    maven {
        url "https://releases.jfrog.io/artifactory/oss-snapshots"
    }
}

def buildInfoVersion = '2.41.6'
dependencies {
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.15.2'
    implementation group: 'org.jfrog.buildinfo', name: 'build-info-extractor', version: buildInfoVersion
    implementation group: 'org.jfrog.buildinfo', name: 'build-info-client', version: buildInfoVersion
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.15.2'
    implementation group: 'org.jfrog.buildinfo', name: 'build-info-api', version: buildInfoVersion
    implementation group: 'net.lingala.zip4j', name: 'zip4j', version: '2.11.4'
    implementation group: 'com.jfrog.xray.client', name: 'xray-client-java', version: '0.14.1'
    implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.4'
    implementation group: 'org.jfrog.filespecs', name: 'file-specs-java', version: '1.1.2'
    implementation group: 'com.jfrog.ide', name: 'ide-plugins-common', version: '2.2.6'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.11'
    implementation group: 'com.google.guava', name: 'guava', version: '32.0.1-jre'

    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.20'
    compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.20'

    testImplementation group: 'org.mockito', name: 'mockito-inline', version: '4.2.0'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '4.2.0'
}

test {
    scanForTestClasses false
    include "**/*Test.class"
    exclude "**/*IntegrationTest*", "**/*PypiScannerTest*"
    testLogging {
        exceptionFormat "full"
        events "started", "passed", "skipped", "failed", "standardOut", "standardError"
        minGranularity 0
    }
}

tasks.register('pythonTests', Test) {
    scanForTestClasses false
    include "**/*PypiScannerTest*"
    testLogging {
        exceptionFormat "full"
        events "started", "passed", "skipped", "failed", "standardOut", "standardError"
        minGranularity 0
    }
}

tasks.register('integrationTests', Test) {
    scanForTestClasses false
    include "**/*IntegrationTests.class"
    testLogging {
        exceptionFormat "full"
        events "started", "passed", "skipped", "failed", "standardOut", "standardError"
        minGranularity 0
    }
}

def webviewFileName = 'jfrog-ide-webview-' + webviewVersion + '.tgz'
def webviewUrl = 'https://releases.jfrog.io/artifactory/ide-webview-npm/jfrog-ide-webview/-/' + webviewFileName
tasks.register('downloadWebview', Download) {
    src webviewUrl
    dest buildDir
    onlyIfModified true
    finalizedBy('getAndUpdateWebviewChecksum')
}

tasks.register('getAndUpdateWebviewChecksum') {
    finalizedBy('verifyWebview')
    if (System.getenv("CI") != null) {
        println 'CI mode is active - Skipping Webview checksum update'
        ext.checksum = webviewChecksum
        return
    }
    ext.checksum = getWebviewChecksumFromServer(webviewUrl)
    updateWebviewChecksumInPropertiesFile(ext.checksum)
}

tasks.register('verifyWebview', Verify) {
    src new File(buildDir, webviewFileName)
    algorithm 'SHA-256'
    checksum getAndUpdateWebviewChecksum.checksum
    finalizedBy('extractWebview')
}

tasks.register('extractWebview', Copy) {
    from tarTree(new File(buildDir, webviewFileName))
    into Paths.get('src', 'main', 'resources', 'jfrog-ide-webview').toFile()
    include '**/build/**/*'
    eachFile {
        path = path.replace('package/build/', '')
    }
}

tasks.withType(JavaCompile).configureEach {
    options.deprecation = true
    options.encoding = "UTF-8"
}

tasks.withType(ProcessResources).configureEach {
    dependsOn('downloadWebview')
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact buildPlugin
        }
    }
}

publishPlugin {
    token = System.getenv("JETBRAINS_TOKEN")
}

/**
 * Get Webview checksum from releases.jfrog.io
 * @param webviewUrl - Webview URL
 * @return the sha256 of the webview
 */
static String getWebviewChecksumFromServer(String webviewUrl) {
    def headRequest = HttpRequest.newBuilder(new URL(webviewUrl).toURI()).method("HEAD", HttpRequest.BodyPublishers.noBody()).build()
    def checksumResponse = HttpClient.newHttpClient().send(headRequest, HttpResponse.BodyHandlers.ofString())
    return checksumResponse.headers().firstValue("x-checksum-sha256").get()
}

/**
 * Update the Webview checksum in the gradle.properties file
 * @param checksum - Webview checksum to update
 */
static def updateWebviewChecksumInPropertiesFile(String checksum) {
    def gradleProps = new Properties()
    File gradlePropertiesFile = new File("gradle.properties")
    gradlePropertiesFile.withInputStream { gradleProps.load(it) }
    gradleProps.setProperty("webviewChecksum", checksum)
    gradlePropertiesFile.withWriter('UTF-8') { fileWriter ->
        gradleProps.each { key, value -> fileWriter.writeLine "$key=$value" }
    }
}
